{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/kevin/Documents/RedditClone/client/src/pages/_app.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query Me {\\n    me {\\n        id\\n        username\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { ChakraProvider, ColorModeProvider } from \"@chakra-ui/react\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { Provider, createClient, dedupExchange, fetchExchange, gql } from \"urql\";\nimport theme from \"../theme\";\n\nfunction customUpdateQuery(cache, queryInput, result, fn) {\n  return cache.updateQuery(queryInput, function (data) {\n    return fn(result, data);\n  });\n}\n\nvar LOGIN_MUTATION = \"\\nmutation Login($username: String!, $password: String!) {\\n  login(options: { username: $username, password: $password}) {\\n    errors {\\n      field\\n      message\\n    }\\n    user {\\n      id\\n      username\\n    }\\n  }\\n}\\n\";\nvar REGISTER_MUTATION = \"\\nmutation Register($username: String!, $password: String!) {\\n  register(options: { username: $username, password: $password}) {\\n    errors {\\n      field\\n      message\\n    }\\n    user {\\n      id\\n      username\\n    }\\n  }\\n}\\n\";\nvar ME_QUERY = gql(_templateObject());\nvar client = createClient({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        login: function login(result, args, cache, info) {\n          cache.updateQuery({\n            query: ME_QUERY\n          }, function (data) {});\n        }\n      }\n    }\n  }), fetchExchange]\n});\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    value: client,\n    children: /*#__PURE__*/_jsxDEV(ChakraProvider, {\n      resetCSS: true,\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(ColorModeProvider, {\n        options: {\n          useSystemColorMode: true\n        },\n        children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/home/kevin/Documents/RedditClone/client/src/pages/_app.tsx"],"names":["ChakraProvider","ColorModeProvider","cacheExchange","Provider","createClient","dedupExchange","fetchExchange","gql","theme","customUpdateQuery","cache","queryInput","result","fn","updateQuery","data","LOGIN_MUTATION","REGISTER_MUTATION","ME_QUERY","client","url","fetchOptions","credentials","exchanges","updates","Mutation","login","args","info","query","MyApp","Component","pageProps","useSystemColorMode"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAASA,cAAT,EAAyBC,iBAAzB,QAAkD,kBAAlD;AACA,SAASC,aAAT,QAAwD,2BAAxD;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,aAAjC,EAAgDC,aAAhD,EAA+DC,GAA/D,QAA0E,MAA1E;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,SAASC,iBAAT,CAA0CC,KAA1C,EAAwDC,UAAxD,EAAgFC,MAAhF,EAA6FC,EAA7F,EAAiI;AAC/H,SAAOH,KAAK,CAACI,WAAN,CAAkBH,UAAlB,EAA8B,UAAAI,IAAI;AAAA,WAAIF,EAAE,CAACD,MAAD,EAASG,IAAT,CAAN;AAAA,GAAlC,CAAP;AACD;;AAED,IAAMC,cAAc,wOAApB;AAeA,IAAMC,iBAAiB,8OAAvB;AAeA,IAAMC,QAAQ,GAAGX,GAAH,mBAAd;AASA,IAAMY,MAAM,GAAGf,YAAY,CAAC;AAC1BgB,EAAAA,GAAG,EAAE,+BADqB;AAE1BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD,GAFY;AAK1BC,EAAAA,SAAS,EAAE,CAAClB,aAAD,EAAgBH,aAAa,CAAC;AACvCsB,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAE,eAACd,MAAD,EAASe,IAAT,EAAejB,KAAf,EAAsBkB,IAAtB,EAA+B;AACpClB,UAAAA,KAAK,CAACI,WAAN,CAAkB;AAACe,YAAAA,KAAK,EAAEX;AAAR,WAAlB,EAAqC,UAAAH,IAAI,EAAI,CAE5C,CAFD;AAGD;AALO;AADH;AAD8B,GAAD,CAA7B,EAUPT,aAVO;AALe,CAAD,CAA3B;;AAkBA,SAASwB,KAAT,OAAyC;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,SAAa,QAAbA,SAAa;AACvC,sBACE,QAAC,QAAD;AAAU,IAAA,KAAK,EAAEb,MAAjB;AAAA,2BACE,QAAC,cAAD;AAAgB,MAAA,QAAQ,MAAxB;AAAyB,MAAA,KAAK,EAAEX,KAAhC;AAAA,6BACE,QAAC,iBAAD;AACE,QAAA,OAAO,EAAE;AACPyB,UAAAA,kBAAkB,EAAE;AADb,SADX;AAAA,+BAKE,QAAC,SAAD,oBAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;KAdQF,K;AAgBT,eAAeA,KAAf","sourcesContent":["import { ChakraProvider, ColorModeProvider } from \"@chakra-ui/react\";\nimport { cacheExchange, Cache, QueryInput, query } from \"@urql/exchange-graphcache\";\nimport { Provider, createClient, dedupExchange, fetchExchange, gql } from \"urql\";\nimport theme from \"../theme\";\n\nfunction customUpdateQuery<Result, Query>(cache: Cache, queryInput: QueryInput, result: any, fn: (r: Result, q: Query) => Query) {\n  return cache.updateQuery(queryInput, data => fn(result, data as any) as any);\n}\n\nconst LOGIN_MUTATION = `\nmutation Login($username: String!, $password: String!) {\n  login(options: { username: $username, password: $password}) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n    }\n  }\n}\n`;\n\nconst REGISTER_MUTATION = `\nmutation Register($username: String!, $password: String!) {\n  register(options: { username: $username, password: $password}) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n    }\n  }\n}\n`;\n\nconst ME_QUERY = gql`\n  query Me {\n    me {\n        id\n        username\n    }\n  }\n`;\n\nconst client = createClient({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\",\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        login: (result, args, cache, info) => {\n          cache.updateQuery({query: ME_QUERY}, data => {\n            \n          });\n        }\n      }\n    }\n  }), fetchExchange]\n});\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <Provider value={client}>\n      <ChakraProvider resetCSS theme={theme}>\n        <ColorModeProvider\n          options={{\n            useSystemColorMode: true,\n          }}\n        >\n          <Component {...pageProps} />\n        </ColorModeProvider>\n      </ChakraProvider>\n    </Provider>\n  );\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}