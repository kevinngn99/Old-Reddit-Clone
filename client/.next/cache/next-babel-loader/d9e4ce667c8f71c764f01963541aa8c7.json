{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/kevin/Documents/RedditClone/client/src/pages/_app.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ChakraProvider, ColorModeProvider } from \"@chakra-ui/react\";\nimport theme from \"../theme\";\n\nfunction customUpdateQuery(cache, queryInput, result, fn) {\n  return cache.updateQuery(queryInput, data => fn(result, data));\n}\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    resetCSS: true,\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(ColorModeProvider, {\n      options: {\n        useSystemColorMode: true\n      },\n      children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 7\n  }, this);\n}\n\nexport default MyApp;","map":{"version":3,"sources":["/home/kevin/Documents/RedditClone/client/src/pages/_app.tsx"],"names":["ChakraProvider","ColorModeProvider","theme","customUpdateQuery","cache","queryInput","result","fn","updateQuery","data","MyApp","Component","pageProps","useSystemColorMode"],"mappings":";;;;;;;;;AAAA,SAASA,cAAT,EAAyBC,iBAAzB,QAAkD,kBAAlD;AAGA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,SAASC,iBAAT,CAA0CC,KAA1C,EAAwDC,UAAxD,EAAgFC,MAAhF,EAA6FC,EAA7F,EAAiI;AAC/H,SAAOH,KAAK,CAACI,WAAN,CAAkBH,UAAlB,EAA8BI,IAAI,IAAIF,EAAE,CAACD,MAAD,EAASG,IAAT,CAAxC,CAAP;AACD;;AAED,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AACvC,sBACI,QAAC,cAAD;AAAgB,IAAA,QAAQ,MAAxB;AAAyB,IAAA,KAAK,EAAEV,KAAhC;AAAA,2BACE,QAAC,iBAAD;AACE,MAAA,OAAO,EAAE;AACPW,QAAAA,kBAAkB,EAAE;AADb,OADX;AAAA,6BAKE,QAAC,SAAD,oBAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADJ;AAWD;;AAED,eAAeF,KAAf","sourcesContent":["import { ChakraProvider, ColorModeProvider } from \"@chakra-ui/react\";\nimport { cacheExchange, Cache, QueryInput, query } from \"@urql/exchange-graphcache\";\nimport { Provider, createClient, dedupExchange, fetchExchange, gql } from \"urql\";\nimport theme from \"../theme\";\n\nfunction customUpdateQuery<Result, Query>(cache: Cache, queryInput: QueryInput, result: any, fn: (r: Result, q: Query) => Query) {\n  return cache.updateQuery(queryInput, data => fn(result, data as any) as any);\n}\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n      <ChakraProvider resetCSS theme={theme}>\n        <ColorModeProvider\n          options={{\n            useSystemColorMode: true,\n          }}\n        >\n          <Component {...pageProps} />\n        </ColorModeProvider>\n      </ChakraProvider>\n  );\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}