{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/kevin/Documents/Other/RedditClone/client/src/pages/forgot-password.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Box, Button } from \"@chakra-ui/react\";\nimport { Formik, Form } from \"formik\";\nimport { withUrqlClient } from \"next-urql\";\nimport { useRouter } from \"next/router\";\nimport React, { useState } from \"react\";\nimport { useMutation } from \"urql\";\nimport { InputField } from \"../components/InputField\";\nimport { Wrapper } from \"../components/Wrapper\";\nimport { createUrqlClient } from \"../utils/createUrqlClient\";\nvar FORGOT_PASSWORD_MUTATION = \"\\nmutation ForgotPassword($email: String!) {\\n  forgotPassword(email: $email)\\n}\\n\";\n\nvar ForgotPassword = function ForgotPassword(_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var router = useRouter();\n\n  var _useMutation = useMutation(FORGOT_PASSWORD_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      forgotPassword = _useMutation2[1];\n\n  var _useState = useState(false),\n      reset = _useState[0],\n      setReset = _useState[1];\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    variant: \"small\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        usernameOrEmail: \"\",\n        password: \"\"\n      },\n      onSubmit: /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n          var setErrors;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  setErrors = _ref2.setErrors;\n                  _context.next = 3;\n                  return forgotPassword(values);\n\n                case 3:\n                  setReset(true);\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x, _x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }(),\n      children: function children(_ref4) {\n        var isSubmitting = _ref4.isSubmitting;\n        return reset ? /*#__PURE__*/_jsxDEV(Box, {\n          children: \"If an account with that email exists, a link has been sent to reset your password.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, _this) : /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(InputField, {\n            name: \"email\",\n            placeholder: \"email\",\n            label: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(Button, {\n            mt: 4,\n            type: \"submit\",\n            colorScheme: \"teal\",\n            isLoading: isSubmitting,\n            children: \"Reset Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ForgotPassword, \"4AC//oBgN36vGKSrPXfOdFqeQ2s=\", false, function () {\n  return [useRouter, useMutation];\n});\n\n_c = ForgotPassword;\nexport default withUrqlClient(createUrqlClient)(ForgotPassword);\n\nvar _c;\n\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"sources":["/home/kevin/Documents/Other/RedditClone/client/src/pages/forgot-password.tsx"],"names":["Box","Button","Formik","Form","withUrqlClient","useRouter","React","useState","useMutation","InputField","Wrapper","createUrqlClient","FORGOT_PASSWORD_MUTATION","ForgotPassword","router","forgotPassword","reset","setReset","usernameOrEmail","password","values","setErrors","isSubmitting"],"mappings":";;;;;;;;;;AAAA,SAASA,GAAT,EAA0BC,MAA1B,QAAwC,kBAAxC;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,MAA5B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AAEA,IAAMC,wBAAwB,uFAA9B;;AAMA,IAAMC,cAA4B,GAAG,SAA/BA,cAA+B,OAAQ;AAAA;;AAAA;;AAC3C,MAAMC,MAAM,GAAGT,SAAS,EAAxB;;AAD2C,qBAEhBG,WAAW,CAACI,wBAAD,CAFK;AAAA;AAAA,MAElCG,cAFkC;;AAAA,kBAGjBR,QAAQ,CAAC,KAAD,CAHS;AAAA,MAGpCS,KAHoC;AAAA,MAG7BC,QAH6B;;AAK3C,sBACE,QAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,aAAa,EAAE;AAAEC,QAAAA,eAAe,EAAE,EAAnB;AAAuBC,QAAAA,QAAQ,EAAE;AAAjC,OADjB;AAEE,MAAA,QAAQ;AAAA,6EAAE,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBC,kBAAAA,SAAjB,SAAiBA,SAAjB;AAAA;AAAA,yBACFN,cAAc,CAACK,MAAD,CADZ;;AAAA;AAERH,kBAAAA,QAAQ,CAAC,IAAD,CAAR;;AAFQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;AAAA,SAFV;AAAA,gBAOG;AAAA,YAAGK,YAAH,SAAGA,YAAH;AAAA,eACCN,KAAK,gBACH,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADG,gBAGH,QAAC,IAAD;AAAA,kCACE,QAAC,UAAD;AAAY,YAAA,IAAI,EAAC,OAAjB;AAAyB,YAAA,WAAW,EAAC,OAArC;AAA6C,YAAA,KAAK,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE,QAAC,MAAD;AACE,YAAA,EAAE,EAAE,CADN;AAEE,YAAA,IAAI,EAAC,QAFP;AAGE,YAAA,WAAW,EAAC,MAHd;AAIE,YAAA,SAAS,EAAEM,YAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJH;AAAA;AAPH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AA6BD,CAlCD;;GAAMT,c;UACWR,S,EACYG,W;;;KAFvBK,c;AAoCN,eAAeT,cAAc,CAACO,gBAAD,CAAd,CAAiCE,cAAjC,CAAf","sourcesContent":["import { Box, Flex, Link, Button } from \"@chakra-ui/react\";\nimport { Formik, Form } from \"formik\";\nimport { withUrqlClient } from \"next-urql\";\nimport { useRouter } from \"next/router\";\nimport React, { useState } from \"react\";\nimport { useMutation } from \"urql\";\nimport { InputField } from \"../components/InputField\";\nimport { Wrapper } from \"../components/Wrapper\";\nimport { createUrqlClient } from \"../utils/createUrqlClient\";\n\nconst FORGOT_PASSWORD_MUTATION = `\nmutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email)\n}\n`;\n\nconst ForgotPassword: React.FC<{}> = ({}) => {\n  const router = useRouter();\n  const [, forgotPassword] = useMutation(FORGOT_PASSWORD_MUTATION);\n  const [reset, setReset] = useState(false);\n\n  return (\n    <Wrapper variant=\"small\">\n      <Formik\n        initialValues={{ usernameOrEmail: \"\", password: \"\" }}\n        onSubmit={async (values, { setErrors }) => {\n          await forgotPassword(values);\n          setReset(true);\n        }}\n      >\n        {({ isSubmitting }) =>\n          reset ? (\n            <Box>If an account with that email exists, a link has been sent to reset your password.</Box>\n          ) : (\n            <Form>\n              <InputField name=\"email\" placeholder=\"email\" label=\"Email\" />\n              <Button\n                mt={4}\n                type=\"submit\"\n                colorScheme=\"teal\"\n                isLoading={isSubmitting}\n              >\n                Reset Password\n              </Button>\n            </Form>\n          )\n        }\n      </Formik>\n    </Wrapper>\n  );\n};\n\nexport default withUrqlClient(createUrqlClient)(ForgotPassword);\n"]},"metadata":{},"sourceType":"module"}