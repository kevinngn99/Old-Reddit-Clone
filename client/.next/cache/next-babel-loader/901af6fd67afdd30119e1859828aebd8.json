{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/kevin/Documents/Other/RedditClone/client/src/pages/register.tsx\";\nimport { Box, Button } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport { withUrqlClient } from \"next-urql\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { useMutation } from \"urql\";\nimport { InputField } from \"../components/InputField\";\nimport { Wrapper } from \"../components/Wrapper\";\nimport { createUrqlClient } from \"../utils/createUrqlClient\";\nconst REGISTER_MUTATION = `\nmutation Register($username: String!, $email: String!, $password: String!) {\n  register(options: { username: $username, email: $email, password: $password }) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n    }\n  }\n}\n`;\n\nconst Register = ({}) => {\n  const router = useRouter();\n  const [, register] = useMutation(REGISTER_MUTATION);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    variant: \"small\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        username: \"\",\n        email: \"\",\n        password: \"\"\n      },\n      onSubmit: async (values, {\n        setErrors\n      }) => {\n        var _response$data, _response$data2;\n\n        const response = await register(values);\n\n        if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.register.errors) {\n          const errorMap = {};\n          response.data.register.errors.forEach(({\n            field,\n            message\n          }) => {\n            errorMap[field] = message;\n          });\n          setErrors(errorMap);\n        } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.register.user) {\n          router.push(\"/\");\n        }\n      },\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(InputField, {\n          name: \"email\",\n          placeholder: \"email\",\n          label: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 4,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            name: \"username\",\n            placeholder: \"username\",\n            label: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 4,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            name: \"password\",\n            placeholder: \"password\",\n            label: \"Password\",\n            type: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          mt: 4,\n          type: \"submit\",\n          colorScheme: \"teal\",\n          isLoading: isSubmitting,\n          children: \"Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\nexport default withUrqlClient(createUrqlClient)(Register);","map":{"version":3,"sources":["/home/kevin/Documents/Other/RedditClone/client/src/pages/register.tsx"],"names":["Box","Button","Form","Formik","withUrqlClient","useRouter","React","useMutation","InputField","Wrapper","createUrqlClient","REGISTER_MUTATION","Register","router","register","username","email","password","values","setErrors","response","data","errors","errorMap","forEach","field","message","user","push","isSubmitting"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button\n} from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport { withUrqlClient } from \"next-urql\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { useMutation } from \"urql\";\nimport { InputField } from \"../components/InputField\";\nimport { Wrapper } from \"../components/Wrapper\";\nimport { createUrqlClient } from \"../utils/createUrqlClient\";\n\ninterface registerProps {}\n\nconst REGISTER_MUTATION = `\nmutation Register($username: String!, $email: String!, $password: String!) {\n  register(options: { username: $username, email: $email, password: $password }) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n    }\n  }\n}\n`;\n\nconst Register: React.FC<registerProps> = ({}) => {\n  const router = useRouter();\n  const [, register] = useMutation(REGISTER_MUTATION);\n\n  return (\n    <Wrapper variant=\"small\">\n      <Formik\n        initialValues={{ username: \"\", email: \"\", password: \"\" }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await register(values);\n          if (response.data?.register.errors) {\n            const errorMap: Record<string, string> = {};\n\n            response.data.register.errors.forEach(({ field, message }) => {\n              errorMap[field] = message;\n            });\n\n            setErrors(errorMap);\n          } else if (response.data?.register.user) {\n            router.push(\"/\");\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <InputField\n              name=\"email\"\n              placeholder=\"email\"\n              label=\"Email\"\n            />\n            <Box mt={4}>\n              <InputField\n                name=\"username\"\n                placeholder=\"username\"\n                label=\"Username\"\n              />\n            </Box>\n            <Box mt={4}>\n              <InputField\n                name=\"password\"\n                placeholder=\"password\"\n                label=\"Password\"\n                type=\"password\"\n              />\n            </Box>\n            <Button\n              mt={4}\n              type=\"submit\"\n              colorScheme=\"teal\"\n              isLoading={isSubmitting}\n            >\n              Sign Up\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Wrapper>\n  );\n};\n\nexport default withUrqlClient(createUrqlClient)(Register);\n"]},"metadata":{},"sourceType":"module"}