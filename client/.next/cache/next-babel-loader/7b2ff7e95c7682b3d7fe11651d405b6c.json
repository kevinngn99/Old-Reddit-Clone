{"ast":null,"code":"import { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { dedupExchange, fetchExchange, gql } from \"urql\";\nconst LOGIN_MUTATION = `\nmutation Login($username: String!, $password: String!) {\n  login(options: { username: $username, password: $password}) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n    }\n  }\n}\n`;\nconst REGISTER_MUTATION = `\nmutation Register($username: String!, $password: String!) {\n  register(options: { username: $username, password: $password}) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n    }\n  }\n}\n`;\nconst ME_QUERY = gql`\n  query Me {\n    me {\n      id\n      username\n    }\n  }\n`;\nexport const createUrqlClient = ssrExchange => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        logout: (result, args, cache, info) => {\n          cache.updateQuery({\n            query: ME_QUERY\n          }, data => {\n            return {\n              me: null\n            };\n          });\n        },\n        login: (result, args, cache, info) => {\n          cache.updateQuery({\n            query: ME_QUERY\n          }, data => {\n            if (result.login.errors) {\n              return {\n                me: null\n              };\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: (result, args, cache, info) => {\n          cache.updateQuery({\n            query: ME_QUERY\n          }, data => {\n            if (result.register.errors) {\n              return {\n                me: null\n              };\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        }\n      }\n    }\n  }), ssrExchange, fetchExchange]\n});","map":{"version":3,"sources":["/home/kevin/Documents/RedditClone/client/src/utils/createUrqlClient.ts"],"names":["cacheExchange","dedupExchange","fetchExchange","gql","LOGIN_MUTATION","REGISTER_MUTATION","ME_QUERY","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","logout","result","args","cache","info","updateQuery","query","data","me","login","errors","user","register"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,GAAvC,QAAkD,MAAlD;AAEA,MAAMC,cAAc,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;AAeA,MAAMC,iBAAiB,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;AAeA,MAAMC,QAAQ,GAAGH,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,OAAO,MAAMI,gBAAgB,GAAIC,WAAD,KAAuB;AACrDC,EAAAA,GAAG,EAAE,+BADgD;AAErDC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD,GAFuC;AAKrDC,EAAAA,SAAS,EAAE,CACTX,aADS,EAETD,aAAa,CAAC;AACZa,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,MAAM,EAAE,CAACC,MAAD,EAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,KAA+B;AACrCD,UAAAA,KAAK,CAACE,WAAN,CAAkB;AAAEC,YAAAA,KAAK,EAAEf;AAAT,WAAlB,EAAwCgB,IAAD,IAAU;AAC/C,mBAAO;AACLC,cAAAA,EAAE,EAAE;AADC,aAAP;AAGD,WAJD;AAKD,SAPO;AAQRC,QAAAA,KAAK,EAAE,CAACR,MAAD,EAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,KAA+B;AACpCD,UAAAA,KAAK,CAACE,WAAN,CAAkB;AAAEC,YAAAA,KAAK,EAAEf;AAAT,WAAlB,EAAwCgB,IAAD,IAAU;AAC/C,gBAAIN,MAAM,CAACQ,KAAP,CAAaC,MAAjB,EAAyB;AACvB,qBAAO;AACLF,gBAAAA,EAAE,EAAE;AADC,eAAP;AAGD,aAJD,MAIO;AACL,qBAAO;AACLA,gBAAAA,EAAE,EAAEP,MAAM,CAACQ,KAAP,CAAaE;AADZ,eAAP;AAGD;AACF,WAVD;AAWD,SApBO;AAqBRC,QAAAA,QAAQ,EAAE,CAACX,MAAD,EAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,KAA+B;AACvCD,UAAAA,KAAK,CAACE,WAAN,CAAkB;AAAEC,YAAAA,KAAK,EAAEf;AAAT,WAAlB,EAAwCgB,IAAD,IAAU;AAC/C,gBAAIN,MAAM,CAACW,QAAP,CAAgBF,MAApB,EAA4B;AAC1B,qBAAO;AACLF,gBAAAA,EAAE,EAAE;AADC,eAAP;AAGD,aAJD,MAIO;AACL,qBAAO;AACLA,gBAAAA,EAAE,EAAEP,MAAM,CAACW,QAAP,CAAgBD;AADf,eAAP;AAGD;AACF,WAVD;AAWD;AAjCO;AADH;AADG,GAAD,CAFJ,EAyCTlB,WAzCS,EA0CTN,aA1CS;AAL0C,CAAvB,CAAzB","sourcesContent":["import { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { dedupExchange, fetchExchange, gql } from \"urql\";\n\nconst LOGIN_MUTATION = `\nmutation Login($username: String!, $password: String!) {\n  login(options: { username: $username, password: $password}) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n    }\n  }\n}\n`;\n\nconst REGISTER_MUTATION = `\nmutation Register($username: String!, $password: String!) {\n  register(options: { username: $username, password: $password}) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n    }\n  }\n}\n`;\n\nconst ME_QUERY = gql`\n  query Me {\n    me {\n      id\n      username\n    }\n  }\n`;\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\" as const,\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          logout: (result, args, cache, info) => {\n            cache.updateQuery({ query: ME_QUERY }, (data) => {\n              return {\n                me: null,\n              };\n            });\n          },\n          login: (result, args, cache, info) => {\n            cache.updateQuery({ query: ME_QUERY }, (data) => {\n              if (result.login.errors) {\n                return {\n                  me: null,\n                };\n              } else {\n                return {\n                  me: result.login.user,\n                };\n              }\n            });\n          },\n          register: (result, args, cache, info) => {\n            cache.updateQuery({ query: ME_QUERY }, (data) => {\n              if (result.register.errors) {\n                return {\n                  me: null,\n                };\n              } else {\n                return {\n                  me: result.register.user,\n                };\n              }\n            });\n          },\n        },\n      },\n    }),\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}