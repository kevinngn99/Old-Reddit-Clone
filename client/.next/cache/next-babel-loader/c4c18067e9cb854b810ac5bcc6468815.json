{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/kevin/Documents/RedditClone/client/src/pages/change-password/[token].tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Button } from \"@chakra-ui/react\";\nimport { Formik, Form } from \"formik\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { useMutation } from \"urql\";\nimport { InputField } from \"../../components/InputField\";\nimport { Wrapper } from \"../../components/Wrapper\";\nvar CHANGE_PASSWORD_MUTATION = \"\\nmutation ChangePassword($token: String!, $newPassword: String!) {\\n  changePassword(token: $token, newPassword: $newPassword) {\\n    errors {\\n      field\\n      message\\n    }\\n    user {\\n      id\\n      username\\n    }\\n  }\\n}\\n\";\n\nvar ChangePassword = function ChangePassword(_ref) {\n  _s();\n\n  var token = _ref.token;\n  var router = useRouter();\n\n  var _useMutation = useMutation(CHANGE_PASSWORD_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      changePassword = _useMutation2[1];\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    variant: \"small\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        newPassword: \"\"\n      },\n      onSubmit: /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n          var _response$data, _response$data2;\n\n          var setErrors, response, errorMap;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  setErrors = _ref2.setErrors;\n                  _context.next = 3;\n                  return changePassword({\n                    newPassword: values.newPassword,\n                    token: token\n                  });\n\n                case 3:\n                  response = _context.sent;\n\n                  if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.changePassword.errors) {\n                    errorMap = {};\n                    response.data.changePassword.errors.forEach(function (_ref4) {\n                      var field = _ref4.field,\n                          message = _ref4.message;\n                      errorMap[field] = message;\n                    });\n                    setErrors(errorMap);\n                  } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.changePassword.user) {\n                    router.push(\"/\");\n                  }\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x, _x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }(),\n      children: function children(_ref5) {\n        var isSubmitting = _ref5.isSubmitting;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(InputField, {\n            name: \"newPassword\",\n            placeholder: \"new password\",\n            label: \"New Password\",\n            type: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Button, {\n            mt: 4,\n            type: \"submit\",\n            colorScheme: \"teal\",\n            isLoading: isSubmitting,\n            children: \"Change Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ChangePassword, \"xjYJDMQiagozFVstsG4KRUnmUD0=\", false, function () {\n  return [useRouter, useMutation];\n});\n\n_c = ChangePassword;\n\nChangePassword.getInitialProps = function (_ref6) {\n  var query = _ref6.query;\n  return {\n    token: query.token\n  };\n};\n\nexport default ChangePassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangePassword\");","map":{"version":3,"sources":["/home/kevin/Documents/RedditClone/client/src/pages/change-password/[token].tsx"],"names":["Button","Formik","Form","useRouter","React","useMutation","InputField","Wrapper","CHANGE_PASSWORD_MUTATION","ChangePassword","token","router","changePassword","newPassword","values","setErrors","response","data","errors","errorMap","forEach","field","message","user","push","isSubmitting","getInitialProps","query"],"mappings":";;;;;;;;;AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,MAA5B;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AAEA,IAAMC,wBAAwB,8OAA9B;;AAeA,IAAMC,cAA2C,GAAG,SAA9CA,cAA8C,OAAe;AAAA;;AAAA,MAAZC,KAAY,QAAZA,KAAY;AACjE,MAAMC,MAAM,GAAGR,SAAS,EAAxB;;AADiE,qBAEtCE,WAAW,CAACG,wBAAD,CAF2B;AAAA;AAAA,MAExDI,cAFwD;;AAIjE,sBACE,QAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,aAAa,EAAE;AAAEC,QAAAA,WAAW,EAAE;AAAf,OADjB;AAEE,MAAA,QAAQ;AAAA,6EAAE,iBAAOC,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBC,kBAAAA,SAAjB,SAAiBA,SAAjB;AAAA;AAAA,yBACeH,cAAc,CAAC;AAACC,oBAAAA,WAAW,EAAEC,MAAM,CAACD,WAArB;AAAkCH,oBAAAA,KAAK,EAAEA;AAAzC,mBAAD,CAD7B;;AAAA;AACFM,kBAAAA,QADE;;AAER,wCAAIA,QAAQ,CAACC,IAAb,mDAAI,eAAeL,cAAf,CAA8BM,MAAlC,EAA0C;AAClCC,oBAAAA,QADkC,GACC,EADD;AAGxCH,oBAAAA,QAAQ,CAACC,IAAT,CAAcL,cAAd,CAA6BM,MAA7B,CAAoCE,OAApC,CAA4C,iBAAwB;AAAA,0BAArBC,KAAqB,SAArBA,KAAqB;AAAA,0BAAdC,OAAc,SAAdA,OAAc;AAClEH,sBAAAA,QAAQ,CAACE,KAAD,CAAR,GAAkBC,OAAlB;AACD,qBAFD;AAIAP,oBAAAA,SAAS,CAACI,QAAD,CAAT;AACD,mBARD,MAQO,uBAAIH,QAAQ,CAACC,IAAb,oDAAI,gBAAeL,cAAf,CAA8BW,IAAlC,EAAwC;AAC7CZ,oBAAAA,MAAM,CAACa,IAAP,CAAY,GAAZ;AACD;;AAZO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;AAAA,SAFV;AAAA,gBAiBG;AAAA,YAAGC,YAAH,SAAGA,YAAH;AAAA,4BACC,QAAC,IAAD;AAAA,kCACE,QAAC,UAAD;AACE,YAAA,IAAI,EAAC,aADP;AAEE,YAAA,WAAW,EAAC,cAFd;AAGE,YAAA,KAAK,EAAC,cAHR;AAIE,YAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,mBADF,eAOE,QAAC,MAAD;AACE,YAAA,EAAE,EAAE,CADN;AAEE,YAAA,IAAI,EAAC,QAFP;AAGE,YAAA,WAAW,EAAC,MAHd;AAIE,YAAA,SAAS,EAAEA,YAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,iBADD;AAAA;AAjBH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAwCD,CA5CD;;GAAMhB,c;UACWN,S,EACYE,W;;;KAFvBI,c;;AA8CNA,cAAc,CAACiB,eAAf,GAAiC,iBAAe;AAAA,MAAZC,KAAY,SAAZA,KAAY;AAC9C,SAAO;AACLjB,IAAAA,KAAK,EAAEiB,KAAK,CAACjB;AADR,GAAP;AAGD,CAJD;;AAMA,eAAeD,cAAf","sourcesContent":["import { Button } from \"@chakra-ui/react\";\nimport { Formik, Form } from \"formik\";\nimport { NextPage } from \"next\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { useMutation } from \"urql\";\nimport { InputField } from \"../../components/InputField\";\nimport { Wrapper } from \"../../components/Wrapper\";\n\nconst CHANGE_PASSWORD_MUTATION = `\nmutation ChangePassword($token: String!, $newPassword: String!) {\n  changePassword(token: $token, newPassword: $newPassword) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n    }\n  }\n}\n`;\n\nconst ChangePassword: NextPage<{ token: string }> = ({ token }) => {\n  const router = useRouter();\n  const [, changePassword] = useMutation(CHANGE_PASSWORD_MUTATION);\n\n  return (\n    <Wrapper variant=\"small\">\n      <Formik\n        initialValues={{ newPassword: \"\" }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await changePassword({newPassword: values.newPassword, token: token});\n          if (response.data?.changePassword.errors) {\n            const errorMap: Record<string, string> = {};\n\n            response.data.changePassword.errors.forEach(({ field, message }) => {\n              errorMap[field] = message;\n            });\n\n            setErrors(errorMap);\n          } else if (response.data?.changePassword.user) {\n            router.push(\"/\");\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <InputField\n              name=\"newPassword\"\n              placeholder=\"new password\"\n              label=\"New Password\"\n              type=\"password\"\n            />\n            <Button\n              mt={4}\n              type=\"submit\"\n              colorScheme=\"teal\"\n              isLoading={isSubmitting}\n            >\n              Change Password\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Wrapper>\n  );\n};\n\nChangePassword.getInitialProps = ({ query }) => {\n  return {\n    token: query.token as string,\n  };\n};\n\nexport default ChangePassword;\n"]},"metadata":{},"sourceType":"module"}