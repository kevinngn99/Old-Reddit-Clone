{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/kevin/Documents/Other/RedditClone/client/src/pages/change-password/[token].tsx\";\nimport { Button } from \"@chakra-ui/react\";\nimport { Formik, Form } from \"formik\";\nimport { withUrqlClient } from \"next-urql\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { useMutation } from \"urql\";\nimport { InputField } from \"../../components/InputField\";\nimport { Wrapper } from \"../../components/Wrapper\";\nimport { createUrqlClient } from \"../../utils/createUrqlClient\";\nconst CHANGE_PASSWORD_MUTATION = `\nmutation ChangePassword($token: String!, $newPassword: String!) {\n  changePassword(token: $token, newPassword: $newPassword) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n    }\n  }\n}\n`;\n\nconst ChangePassword = ({\n  token\n}) => {\n  const router = useRouter();\n  const [, changePassword] = useMutation(CHANGE_PASSWORD_MUTATION);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    variant: \"small\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        newPassword: \"\"\n      },\n      onSubmit: async (values, {\n        setErrors\n      }) => {\n        var _response$data, _response$data2;\n\n        const response = await changePassword({\n          newPassword: values.newPassword,\n          token: token\n        });\n\n        if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.changePassword.errors) {\n          const errorMap = {};\n          response.data.changePassword.errors.forEach(({\n            field,\n            message\n          }) => {\n            errorMap[field] = message;\n          });\n          setErrors(errorMap);\n        } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.changePassword.user) {\n          router.push(\"/\");\n        }\n      },\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(InputField, {\n          name: \"newPassword\",\n          placeholder: \"new password\",\n          label: \"New Password\",\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          mt: 4,\n          type: \"submit\",\n          colorScheme: \"teal\",\n          isLoading: isSubmitting,\n          children: \"Change Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\nChangePassword.getInitialProps = ({\n  query\n}) => {\n  return {\n    token: query.token\n  };\n};\n\nexport default withUrqlClient(createUrqlClient)(ChangePassword);","map":{"version":3,"sources":["/home/kevin/Documents/Other/RedditClone/client/src/pages/change-password/[token].tsx"],"names":["Button","Formik","Form","withUrqlClient","useRouter","React","useMutation","InputField","Wrapper","createUrqlClient","CHANGE_PASSWORD_MUTATION","ChangePassword","token","router","changePassword","newPassword","values","setErrors","response","data","errors","errorMap","forEach","field","message","user","push","isSubmitting","getInitialProps","query"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AAEA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAuBC,WAAvB,QAA0C,MAA1C;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AAEA,MAAMC,wBAAwB,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;;AAeA,MAAMC,cAA2C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AACjE,QAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAM,GAAGU,cAAH,IAAqBR,WAAW,CAACI,wBAAD,CAAtC;AAEA,sBACE,QAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,aAAa,EAAE;AAAEK,QAAAA,WAAW,EAAE;AAAf,OADjB;AAEE,MAAA,QAAQ,EAAE,OAAOC,MAAP,EAAe;AAAEC,QAAAA;AAAF,OAAf,KAAiC;AAAA;;AACzC,cAAMC,QAAQ,GAAG,MAAMJ,cAAc,CAAC;AAACC,UAAAA,WAAW,EAAEC,MAAM,CAACD,WAArB;AAAkCH,UAAAA,KAAK,EAAEA;AAAzC,SAAD,CAArC;;AACA,8BAAIM,QAAQ,CAACC,IAAb,mDAAI,eAAeL,cAAf,CAA8BM,MAAlC,EAA0C;AACxC,gBAAMC,QAAgC,GAAG,EAAzC;AAEAH,UAAAA,QAAQ,CAACC,IAAT,CAAcL,cAAd,CAA6BM,MAA7B,CAAoCE,OAApC,CAA4C,CAAC;AAAEC,YAAAA,KAAF;AAASC,YAAAA;AAAT,WAAD,KAAwB;AAClEH,YAAAA,QAAQ,CAACE,KAAD,CAAR,GAAkBC,OAAlB;AACD,WAFD;AAIAP,UAAAA,SAAS,CAACI,QAAD,CAAT;AACD,SARD,MAQO,uBAAIH,QAAQ,CAACC,IAAb,oDAAI,gBAAeL,cAAf,CAA8BW,IAAlC,EAAwC;AAC7CZ,UAAAA,MAAM,CAACa,IAAP,CAAY,GAAZ;AACD;AACF,OAfH;AAAA,gBAiBG,CAAC;AAAEC,QAAAA;AAAF,OAAD,kBACC,QAAC,IAAD;AAAA,gCACE,QAAC,UAAD;AACE,UAAA,IAAI,EAAC,aADP;AAEE,UAAA,WAAW,EAAC,cAFd;AAGE,UAAA,KAAK,EAAC,cAHR;AAIE,UAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE,QAAC,MAAD;AACE,UAAA,EAAE,EAAE,CADN;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,WAAW,EAAC,MAHd;AAIE,UAAA,SAAS,EAAEA,YAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAlBJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAwCD,CA5CD;;AA8CAhB,cAAc,CAACiB,eAAf,GAAiC,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC9C,SAAO;AACLjB,IAAAA,KAAK,EAAEiB,KAAK,CAACjB;AADR,GAAP;AAGD,CAJD;;AAMA,eAAeT,cAAc,CAACM,gBAAD,CAAd,CAAiCE,cAAjC,CAAf","sourcesContent":["import { Button } from \"@chakra-ui/react\";\nimport { Formik, Form } from \"formik\";\nimport { NextPage } from \"next\";\nimport { withUrqlClient } from \"next-urql\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { createClient, useMutation } from \"urql\";\nimport { InputField } from \"../../components/InputField\";\nimport { Wrapper } from \"../../components/Wrapper\";\nimport { createUrqlClient } from \"../../utils/createUrqlClient\";\n\nconst CHANGE_PASSWORD_MUTATION = `\nmutation ChangePassword($token: String!, $newPassword: String!) {\n  changePassword(token: $token, newPassword: $newPassword) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n    }\n  }\n}\n`;\n\nconst ChangePassword: NextPage<{ token: string }> = ({ token }) => {\n  const router = useRouter();\n  const [, changePassword] = useMutation(CHANGE_PASSWORD_MUTATION);\n\n  return (\n    <Wrapper variant=\"small\">\n      <Formik\n        initialValues={{ newPassword: \"\" }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await changePassword({newPassword: values.newPassword, token: token});\n          if (response.data?.changePassword.errors) {\n            const errorMap: Record<string, string> = {};\n\n            response.data.changePassword.errors.forEach(({ field, message }) => {\n              errorMap[field] = message;\n            });\n\n            setErrors(errorMap);\n          } else if (response.data?.changePassword.user) {\n            router.push(\"/\");\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <InputField\n              name=\"newPassword\"\n              placeholder=\"new password\"\n              label=\"New Password\"\n              type=\"password\"\n            />\n            <Button\n              mt={4}\n              type=\"submit\"\n              colorScheme=\"teal\"\n              isLoading={isSubmitting}\n            >\n              Change Password\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Wrapper>\n  );\n};\n\nChangePassword.getInitialProps = ({ query }) => {\n  return {\n    token: query.token as string,\n  };\n};\n\nexport default withUrqlClient(createUrqlClient)(ChangePassword);\n"]},"metadata":{},"sourceType":"module"}