{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query Me {\\n    me {\\n      id\\n      username\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { dedupExchange, fetchExchange, gql } from \"urql\";\nvar LOGIN_MUTATION = \"\\nmutation Login($username: String!, $password: String!) {\\n  login(options: { username: $username, password: $password}) {\\n    errors {\\n      field\\n      message\\n    }\\n    user {\\n      id\\n      username\\n    }\\n  }\\n}\\n\";\nvar REGISTER_MUTATION = \"\\nmutation Register($username: String!, $password: String!) {\\n  register(options: { username: $username, password: $password}) {\\n    errors {\\n      field\\n      message\\n    }\\n    user {\\n      id\\n      username\\n    }\\n  }\\n}\\n\";\nvar ME_QUERY = gql(_templateObject());\nexport var createUrqlClient = function createUrqlClient(ssrExchange) {\n  return {\n    url: \"http://localhost:4000/graphql\",\n    fetchOptions: {\n      credentials: \"include\"\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      updates: {\n        Mutation: {\n          logout: function logout(result, args, cache, info) {\n            cache.updateQuery({\n              query: ME_QUERY\n            }, function (data) {\n              return {\n                me: null\n              };\n            });\n          },\n          login: function login(result, args, cache, info) {\n            cache.updateQuery({\n              query: ME_QUERY\n            }, function (data) {\n              if (result.login.errors) {\n                return {\n                  me: null\n                };\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: function register(result, args, cache, info) {\n            cache.updateQuery({\n              query: ME_QUERY\n            }, function (data) {\n              if (result.register.errors) {\n                return {\n                  me: null\n                };\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          }\n        }\n      }\n    }), ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["/home/kevin/Documents/Other/RedditClone/client/src/utils/createUrqlClient.ts"],"names":["cacheExchange","dedupExchange","fetchExchange","gql","LOGIN_MUTATION","REGISTER_MUTATION","ME_QUERY","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","logout","result","args","cache","info","updateQuery","query","data","me","login","errors","user","register"],"mappings":";;;;;;;;;;;;AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,GAAvC,QAAkD,MAAlD;AAEA,IAAMC,cAAc,wOAApB;AAeA,IAAMC,iBAAiB,8OAAvB;AAeA,IAAMC,QAAQ,GAAGH,GAAH,mBAAd;AASA,OAAO,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,WAAD;AAAA,SAAuB;AACrDC,IAAAA,GAAG,EAAE,+BADgD;AAErDC,IAAAA,YAAY,EAAE;AACZC,MAAAA,WAAW,EAAE;AADD,KAFuC;AAKrDC,IAAAA,SAAS,EAAE,CACTX,aADS,EAETD,aAAa,CAAC;AACZa,MAAAA,OAAO,EAAE;AACPC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,MAAM,EAAE,gBAACC,MAAD,EAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,EAA+B;AACrCD,YAAAA,KAAK,CAACE,WAAN,CAAkB;AAAEC,cAAAA,KAAK,EAAEf;AAAT,aAAlB,EAAuC,UAACgB,IAAD,EAAU;AAC/C,qBAAO;AACLC,gBAAAA,EAAE,EAAE;AADC,eAAP;AAGD,aAJD;AAKD,WAPO;AAQRC,UAAAA,KAAK,EAAE,eAACR,MAAD,EAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,EAA+B;AACpCD,YAAAA,KAAK,CAACE,WAAN,CAAkB;AAAEC,cAAAA,KAAK,EAAEf;AAAT,aAAlB,EAAuC,UAACgB,IAAD,EAAU;AAC/C,kBAAIN,MAAM,CAACQ,KAAP,CAAaC,MAAjB,EAAyB;AACvB,uBAAO;AACLF,kBAAAA,EAAE,EAAE;AADC,iBAAP;AAGD,eAJD,MAIO;AACL,uBAAO;AACLA,kBAAAA,EAAE,EAAEP,MAAM,CAACQ,KAAP,CAAaE;AADZ,iBAAP;AAGD;AACF,aAVD;AAWD,WApBO;AAqBRC,UAAAA,QAAQ,EAAE,kBAACX,MAAD,EAASC,IAAT,EAAeC,KAAf,EAAsBC,IAAtB,EAA+B;AACvCD,YAAAA,KAAK,CAACE,WAAN,CAAkB;AAAEC,cAAAA,KAAK,EAAEf;AAAT,aAAlB,EAAuC,UAACgB,IAAD,EAAU;AAC/C,kBAAIN,MAAM,CAACW,QAAP,CAAgBF,MAApB,EAA4B;AAC1B,uBAAO;AACLF,kBAAAA,EAAE,EAAE;AADC,iBAAP;AAGD,eAJD,MAIO;AACL,uBAAO;AACLA,kBAAAA,EAAE,EAAEP,MAAM,CAACW,QAAP,CAAgBD;AADf,iBAAP;AAGD;AACF,aAVD;AAWD;AAjCO;AADH;AADG,KAAD,CAFJ,EAyCTlB,WAzCS,EA0CTN,aA1CS;AAL0C,GAAvB;AAAA,CAAzB","sourcesContent":["import { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { dedupExchange, fetchExchange, gql } from \"urql\";\n\nconst LOGIN_MUTATION = `\nmutation Login($username: String!, $password: String!) {\n  login(options: { username: $username, password: $password}) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n    }\n  }\n}\n`;\n\nconst REGISTER_MUTATION = `\nmutation Register($username: String!, $password: String!) {\n  register(options: { username: $username, password: $password}) {\n    errors {\n      field\n      message\n    }\n    user {\n      id\n      username\n    }\n  }\n}\n`;\n\nconst ME_QUERY = gql`\n  query Me {\n    me {\n      id\n      username\n    }\n  }\n`;\n\nexport const createUrqlClient = (ssrExchange: any) => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\" as const,\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          logout: (result, args, cache, info) => {\n            cache.updateQuery({ query: ME_QUERY }, (data) => {\n              return {\n                me: null,\n              };\n            });\n          },\n          login: (result, args, cache, info) => {\n            cache.updateQuery({ query: ME_QUERY }, (data) => {\n              if (result.login.errors) {\n                return {\n                  me: null,\n                };\n              } else {\n                return {\n                  me: result.login.user,\n                };\n              }\n            });\n          },\n          register: (result, args, cache, info) => {\n            cache.updateQuery({ query: ME_QUERY }, (data) => {\n              if (result.register.errors) {\n                return {\n                  me: null,\n                };\n              } else {\n                return {\n                  me: result.register.user,\n                };\n              }\n            });\n          },\n        },\n      },\n    }),\n    ssrExchange,\n    fetchExchange,\n  ],\n});\n"]},"metadata":{},"sourceType":"module"}